# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  pull_request:
    branches: [ develop ]
  push:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-latest
    


    steps:
      - name: Pending status
        uses: ouzi-dev/commit-status-updater@v1.1.2
        with:
          status: "pending"
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Check codestyle
        run: mvn checkstyle:check
#      - name: Check for PMD violations
#        run: mvn pmd:check
#      - name: Check for CPD violations
#        run: mvn pmd:cpd-check
      - uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'airbnb' # Optional, default value is "test". The specified database which will be create
          mysql root password: 'Immanuel1724!' #${{ secrets.RootPassword }} # Required if "mysql user" is empty, default is empty. The root superuser password
#          mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
#          mysql password: ${{ secrets.DatabasePassword }} # Required if "mysql user" exists. The password for the "mysql user"

      - name: Build with Maven
        run: mvn -DJWT_SECRET=jwt_secret -DGOOGLE_CLIENT_ID=google_client_id -DGOOGLE_CLIENT_SECRET=google_client_secret -DMAILGUN_API_KEY=mailgun_api_key -DMAILGUN_ENDPOINT=mailgun_endpoint -B verify
#      - name: Run SpotBugs static analysis
#        run: mvn spotbugs:check
#      - name: Check coverage and mutation
#        run: mvn pitest:mutationCoverage
      - name: Status check
        if: always()
        uses: ouzi-dev/commit-status-updater@v1.1.2
        with:
          addHoldComment: "true"
          status: "${{ job.status }}"
